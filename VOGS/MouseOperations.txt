public class MouseOperations{
        /**
     * Displays a popup window declaring the winner.
     * @param winner Name of the winner ("White" or "Black").
     */
    private static void displayPopup(String winner) {
        JFrame popup = new JFrame("game over");

        popup.setSize(200,100);
        popup.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel(){
            @Override
            protected void paintComponent(Graphics g){
                super.paintComponent(g);
                g.setColor(Color.BLACK);
                g.drawString(winner + " wins!", 50, 50);
            }
        };
        popup.add(panel);
        popup.setVisible(true);
    }

        // Mouse listener for selecting and moving pieces
        frame.add(pn);
        frame.addMouseMotionListener(new MouseMotionListener() {
            @Override
            public void mouseDragged(MouseEvent e) {
                if(selectedPiece!=null){
                    selectedPiece.xPixelPos=e.getX()-32;
                    selectedPiece.yPixelPos=e.getY()-32;
                    frame.repaint();
                }
            }
            //Changes mouse icon when hovering over a piece
            @Override
            public void mouseMoved(MouseEvent e) {
                Piece pieceAt = getPieceAt(e.getX(), e.getY(), pieceList);
                if (pieceAt != null) {
                    frame.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.HAND_CURSOR));
                } else {
                    frame.setCursor(java.awt.Cursor.getDefaultCursor());
                }
            }
        });

        
        //Checks for click
        frame.addMouseListener(new MouseListener() {
            boolean click = false;
            @Override
            public void mouseClicked(MouseEvent e) {

            }

            
            //Selects piece that the user clicks with their mouse
            @Override
            public void mousePressed(MouseEvent e) {
            // System.out.println((getPieceAt(e.getX(), e.getY(), pieceList).isWhite?"white ":"balck ")+getPieceAt(e.getX(), e.getY(), pieceList).pieceType);
                if (!click){ 
                    selectedPiece=getPieceAt(e.getX(), e.getY(), pieceList);
                }
                
            }
            //Checks the position of a piece after the mouse is released and checks to see if both kings are still present in order to determine if the game is over or not
            @Override
            public void mouseReleased(MouseEvent e) {
                    
                    if (selectedPiece.xPos == e.getX()/64 && selectedPiece.yPos == e.getY()/64 && click == false){
                        click = true;
                    }
                    else if (click){
                        click = false;
                    }
                    selectedPiece.move(e.getX()/64, e.getY()/64);
                    frame.repaint();
                    

                    boolean[] kingsPresent = {false, false};
                    for (Piece p: pieceList){
                        if (p.pieceType.equals("king")){
                            kingsPresent[p.isWhite ? 0 : 1 ] = true;
                        }
                    }
                    if (!kingsPresent[0]){displayPopup("black");}
                    else if(!kingsPresent[1]){displayPopup("white");}

                    if (!click){
                        selectedPiece = null;
                    }        
            }


            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });

        frame.add(pn);
        frame.setSize(512, 512);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}